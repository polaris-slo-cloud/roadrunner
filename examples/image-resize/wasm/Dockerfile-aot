# ---- Build & AOT stage ----
FROM rust:1.81.0-slim-bookworm AS builder

# Enable WASI target
RUN rustup target add wasm32-wasi

# Install WasmEdge (AOT compiler only)
ENV WEDGE_VER=0.14.1
RUN apt-get update && apt-get install -y curl ca-certificates && \
    curl -LO https://github.com/WasmEdge/WasmEdge/releases/download/${WEDGE_VER}/WasmEdge-${WEDGE_VER}-manylinux2014_x86_64.tar.gz && \
    tar -xzf WasmEdge-${WEDGE_VER}-manylinux2014_x86_64.tar.gz && \
    cp WasmEdge-${WEDGE_VER}-Linux/bin/wasmedge* /usr/local/bin/ && \
    cp WasmEdge-${WEDGE_VER}-Linux/lib64/libwasmedge.so* /usr/lib/ && \
    rm -rf WasmEdge-${WEDGE_VER}-Linux WasmEdge-${WEDGE_VER}-manylinux2014_x86_64.tar.gz
ENV LD_LIBRARY_PATH=/usr/lib

# Set working directory
WORKDIR /build

# Copy manifest files
COPY Cargo.toml Cargo.lock ./

# Dummy main to prefetch dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs && \
    cargo build --target=wasm32-wasi --release || true

# Replace with actual source code
COPY src ./src

# Compile to WASM
RUN cargo build --target=wasm32-wasi --release

# AOT compile with WasmEdge
RUN wasmedge compile ./target/wasm32-wasi/release/image-resize-wasm.wasm /image-resize-wasm.aot.wasm

# ---- Runtime stage ----
FROM scratch

# Copy AOT binary to final image
COPY --from=builder /image-resize-wasm.aot.wasm /image-resize-wasm.wasm

# Set entrypoint (unchanged)
ENTRYPOINT ["/image-resize-wasm.wasm"]
